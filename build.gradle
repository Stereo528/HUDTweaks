plugins {
	id 'maven-publish'
	alias libs.plugins.quilt.loom
	id 'org.ajoberstar.grgit' version '4.1.0'
}

archivesBaseName = project.archives_base_name
version = getVersion()
group = project.maven_group

repositories {
	maven { url = "https://api.modrinth.com/maven" }
	maven { url = "https://maven.terraformersmc.com/releases/" }
	maven { url = "https://maven.shedaniel.me/" }
}


dependencies {
	minecraft libs.minecraft
	mappings loom.layered {
		mappings "org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:intermediary-v2"
		officialMojangMappings()
	}
	modImplementation libs.bundles.dependencies
	modLocalRuntime(libs.bundles.dev.mods) { exclude group: "net.fabricmc"; exclude group: "net.fabricmc.fabric-api"; exclude group: "net.fabricmc.loader" }
}

processResources {
	inputs.property "version", version

	filesMatching('quilt.mod.json') {
		expand "version": version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	withSourcesJar()

	// withJavadocJar()
}


jar {
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}" }
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {

	}
}

String getVersion() {
	String version = "${project.mod_version}+mc${libs.versions.minecraft.get()}"

	if (findProperty("releaseType") != "stable") {
		version += "-rev.${grgit.head().abbreviatedId}"
	}

	return version

}
